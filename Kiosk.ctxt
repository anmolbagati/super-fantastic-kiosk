#BlueJ class context
comment0.target=Kiosk
comment0.text=\n\ The\ kiosk\ class\ is\ the\ main\ class\ where\ the\ customer\ will\ interact\ with\ the\ kiosk\ to\ do\ multiple\ functions\n\ The\ customer\ can\ create\ an\ order,\ add\ credits\ to\ user\ account,\ view\ and\ purchase\ items\ and\ simulate\ collection\ of\ order\n\ \n\ @author\ Anmol\ Bagati\n\ @version\ v3.5\ \n
comment1.params=
comment1.target=Kiosk()
comment1.text=\n\ Default\ Constructor\ for\ objects\ of\ class\ Kiosk\n
comment10.params=
comment10.target=void\ displayItemsOrdered()
comment10.text=\n\ Method\ to\ display\ the\ items\ ordered\ by\ the\ user,\ when\ customer\ selects\ option\ 4.\n\ \n\ The\ method\ checks\ if\ the\ user\ has\ purchased\ items,\ if\ yes,\ displays\ the\ items\ purchased,\ \n\ total\ expense\ and\ the\ remaining\ credit\ balance.\n
comment11.params=
comment11.target=void\ displayMainMenu()
comment11.text=\n\ Method\ to\ display\ main\ menu\n
comment12.params=
comment12.target=void\ displayPurchaseMenu()
comment12.text=\n\ Method\ to\ display\ purchase\ menu\n
comment13.params=
comment13.target=java.lang.String\ getCustomerName()
comment13.text=\n\ Method\ to\ input\ 'valid'\ customer\ name\ in\ a\ string\ from\ the\ user.\n\ \n\ @returns\ \ \ \ \ a\ value\ of\ the\ name\ inout\ by\ user\ through\ console\ (String)\n
comment14.params=
comment14.target=int\ getNewCredits()
comment14.text=\n\ Method\ to\ input\ 'valid'\ customer\ credits\ from\ the\ user.\n\ \n\ @returns\ \ \ \ \ \ \ \ if\ credits\ is\ validated\ (Integer)\n
comment15.params=inputString
comment15.target=boolean\ isInteger(java.lang.String)
comment15.text=\n\ Method\ to\ check\ if\ an\ user\ input\ value\ is\ integer\ or\ not\n\ \n\ @param\ \ inputString\ \ \ a\ user\ input\ of\ String\ data\ type\ from\ the\ system\ console\n\ @returns\ \ \ \ \ \ \ \ \ \ \ \ \ \ value\ if\ its\ an\ integer\ (boolean)\n
comment16.params=
comment16.target=void\ leaveKiosk()
comment16.text=\n\ Method\ to\ exit\ the\ kiosk\ by\ resetting\ the\ kiosk\ application\n
comment17.params=message
comment17.target=void\ print(java.lang.String)
comment17.text=\n\ Method\ to\ print\ a\ message\n\ \n\ @param\ \ message\ \ \ a\ string\ that\ is\ to\ be\ printed\ to\ the\ user\ through\ system\ console\n
comment18.params=
comment18.target=void\ purchaseAnItem()
comment18.text=\n\ Method\ to\ accept\ user\ input\ for\ the\ purchase\ menu\ options\n\ and\ validate\ input\ (is\ it\ between\ 1-6?)\n
comment19.params=itemName\ itemCost
comment19.target=void\ purchaseItem(java.lang.String,\ int)
comment19.text=\n\ Method\ to\ purchase\ the\ item\ (if\ enough\ credit),\ performing\ the\ calculations\ of\ remaining\ credits\n\ \n\ @param\ \ itemName\ \ \ a\ string\ to\ store\ item\ name\n\ @param\ \ itemCost\ \ \ an\ integer\ to\ store\ item\ cost\n
comment2.params=newCustomer\ newRandomNum
comment2.target=Kiosk(Customer,\ LuckyDipGenerator)
comment2.text=\n\ Non-Deafult\ Constructor\ for\ objects\ of\ class\ Kiosk\ with\ parameterisd\ variables\n
comment20.params=userOption
comment20.target=boolean\ purchaseItemOptions(java.lang.String)
comment20.text=\n\ Method\ to\ get\ user\ input\ to\ purchase\ which\ item\n\ \n\ userOption\ -\ a\ string\ input\ from\ user\ after\ the\ user\ has\ selected\ which\ item\ to\ purchase\n
comment21.params=
comment21.target=void\ startProgram()
comment21.text=\n\ \ Method\ to\ start\ the\ main\ interaction\ with\ the\ program\n
comment22.params=name
comment22.target=boolean\ validateName(java.lang.String)
comment22.text=\n\ \ Method\ to\ validate\ if\ the\ user\ inputed\ name\ is\ of\ valid\ format.\n\ \ \n\ \ @returns\ \ \ \ \ \ a\ true\ value\ if\ the\ format\ is\ valid\ (boolean)\n
comment3.params=message
comment3.target=java.lang.String\ acceptStringInput(java.lang.String)
comment3.text=\n\ Method\ to\ take\ user\ input\ from\ system\ keyboard\ through\ console\n\ \n\ @param\ \ message\ \ \ a\ String\ data\ type\ which\ prints\ the\ message\ before\ taking\ user\ input\n\ @return\ \ \ \ \ \ \ \ \ \ \ input\ by\ user\ (String)\n
comment4.params=
comment4.target=void\ buyCredit()
comment4.text=\n\ Method\ to\ buy\ credits\ when\ user\ selects\ the\ option\ 2.\n\ \n\ It\ uses\ another\ method\ getNewCredits();\ to\ input\ the\ credits\ from\ the\ user\n\ and\ then\ sets\ the\ new\ credit\ by\ adding\ new\ to\ the\ existing\ and\ displays\ it\ to\ user.\n\ \n
comment5.params=itemCost
comment5.target=boolean\ checkCreditBalance(int)
comment5.text=\n\ Method\ to\ check\ credit\ balance\ available\ is\ greater\ than\ the\ itemcost\ of\ the\ item\n\ selected\ to\ be\ purchased.\n\ \n\ @param\ \ itemCost\ \ \ An\ integer\ cost\ of\ the\ selected\ item.\n\ @returns\ \ \ \ \ \ \ \ \ \ \ a\ value\ if\ available\ user\ credits\ is\ greater\ than\ the\ cost\ of\ item\ selected\n
comment6.params=
comment6.target=boolean\ checkCustomerExists()
comment6.text=\n\ Method\ to\ check\ if\ a\ customer\ exixts\ in\ the\ kiosk\ system.\n\ \n\ @returns\ \ \ \ \ \ \ value\ if\ the\ customer\ has\ been\ created\ by\ user\ (boolean)\n
comment7.params=
comment7.target=void\ collectOrder()
comment7.text=\n\ Method\ to\ collect\ order\ after\ the\ order\ is\ processed\ for\ checkout\ by\ the\ user,\ using\ option\ 5.\n\ This\ methods\ displays\ the\ item\ purchased\ with\ a\ goodbye\ message.\n\ \n\ The\ method\ also\ clears\ the\ customer\ object\ for\ fresh\ entry.\n
comment8.params=
comment8.target=void\ createOrder()
comment8.text=\n\ Method\ to\ create\ a\ new\ order\ after\ option\ 1\ is\ selected\ by\ the\ user.\n\ \n\ If\ customer\ already\ exists,\ it\ will\ clear\ the\ old\ customer\ and\ create\ new\ one.\n\ The\ method\ inputs\ name\ and\ initial\ credits\ from\ the\ user\ to\ create\ an\ order.\n
comment9.params=
comment9.target=void\ displayHelp()
comment9.text=\n\ Method\ to\ display\ the\ help\ or\ instructions\ to\ use\ the\ application\n
numComments=23
